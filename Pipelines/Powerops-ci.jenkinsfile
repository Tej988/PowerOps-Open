pipeline {
    agent any
    environment {
        // Load credentials from Jenkins Credential Store
        SOURCE_APP_ID = credentials('SOURCE_APP_ID')
        SOURCE_CLIENT_SECRET = credentials('SOURCE_CLIENT_SECRET')
        SOURCE_TENANT_ID = credentials('SOURCE_TENANT_ID')
        SOLUTION_NAME = credentials('SOLUTION_NAME')
        EXPORT_PATH = 'C:\\solutions\\exported' 
        SOURCE_ENV_URL = credentials('SOURCE_ENV_URL')
        BRANCH_NAME = 'feature_tej'
        GIT_CREDENTIALS = credentials('GITHUB')
        GIT_URL = "https://${GIT_CREDENTIALS}@github.com/Tej988/PowerOps-Open.git"
        PATH = "C:\\Users\\adminuser\\AppData\\Local\\Microsoft\\PowerAppsCLI\\;C:\\Program Files\\Git\\bin\\;$PATH"
    }
    stages {
        stage('Approval') {
            steps {
                script {
                    input message: 'Approve the exported solution?', ok: 'Approve', submitter: 'admin'
                }
            }
        }
        stage('Authenticate Source Environment') {
            steps {
                bat """
                pac auth create --applicationId %SOURCE_APP_ID% --clientSecret %SOURCE_CLIENT_SECRET% --tenant %SOURCE_TENANT_ID%
                """
            }
        }
        stage('Select Source Environment') {
            steps {
                bat """
                pac org select --environment https://%SOURCE_ENV_URL%
                """
            }
        }
        stage('Export Solution') {
            steps {
                bat """
                pac solution export --name ${SOLUTION_NAME} --path ${EXPORT_PATH} --managed --overwrite
                """
            }
        }
        stage('Unzip Exported Solution') {
            steps {
                bat "powershell -Command \"Expand-Archive -Path '${EXPORT_PATH}\\${SOLUTION_NAME}_managed.zip' -DestinationPath '${EXPORT_PATH}\\unzipped_solution' -Force\""
            }
        }
        stage('Initialize Git and Add Remote') {
            steps {
                dir("${EXPORT_PATH}\\unzipped_solution") {
                    script {
                        // Check if the .git directory exists
                        def isGitRepo = fileExists('.git')
                        
                        // Initialize Git and add remote only if it's not a Git repo
                        if (!isGitRepo) {
                            bat """
                            git init
                            git remote add origin %GIT_URL%
                            """
                            echo "Initialized Git and added remote origin."
                        } else {
                            echo "Git repository already initialized."
                        }
                    }
                }
            }
        }
        stage('Check if Solution Folder Exists in Repo') {
            steps {
                dir("${EXPORT_PATH}\\unzipped_solution") {
                    script {
                        // Fetch the branch to make sure we are up-to-date
                        bat "git fetch origin"
                        
                        // Check if the solution folder exists in the remote repository
                        def folderExists = bat(script: "git ls-tree --name-only origin/${BRANCH_NAME} | findstr /i \"${SOLUTION_NAME}\"", returnStatus: true)

                        if (folderExists == 0) {
                            // If folder exists, pull changes
                            bat """
                            git checkout ${BRANCH_NAME}
                            git pull origin ${BRANCH_NAME}
                            """
                            echo "Solution folder exists in the repository. Pulling latest changes."
                        } else {
                            // If folder doesn't exist, create a new folder for the solution
                            bat "mkdir ${SOLUTION_NAME}"
                            bat "git add ${SOLUTION_NAME}"
                            echo "Solution folder does not exist. Creating a new folder for the solution."
                        }
                    }
                }
            }
        }
        stage('Push Unzipped Solution to GitHub') {
            steps {
                dir("${EXPORT_PATH}\\unzipped_solution") {
                    script {
                        // Check for changes
                        def changes = bat(script: "git status --porcelain", returnStdout: true).trim()
                        if (changes) {
                            // If there are changes, add, commit, and push
                            bat """
                            git add .
                            git commit -m "Exported solution: ${SOLUTION_NAME}"
                            git push -u origin ${BRANCH_NAME}
                            """
                        } else {
                            echo "No changes to commit."
                        }
                    }
                }
            }
        }
        stage('Clean Export Directory') {
        steps {
            script {
                // Define the paths to clean
                def solutionZipPath = "${EXPORT_PATH}\\${SOLUTION_NAME}_managed.zip"
                def unzippedSolutionPath = "${EXPORT_PATH}\\unzipped_solution"

                // Remove the exported solution ZIP file if it exists
                bat """
                if exist "${solutionZipPath}" (
                    del /F /Q "${solutionZipPath}"
                )
                """

                // Remove the unzipped solution folder if it exists, but keep .git
                bat """
                if exist "${unzippedSolutionPath}" (
                    rmdir /S /Q "${unzippedSolutionPath}"
                )
                """

                echo "Cleaned up solution files, leaving .git and other necessary files intact."
            }
        }
}

    }
}
